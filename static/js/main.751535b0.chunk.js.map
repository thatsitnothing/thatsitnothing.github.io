{"version":3,"sources":["components/Jumbotron.js","components/Layout.js","components/JumboAbout.js","components/JumboShop.js","components/NavigationBar.js","Home.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","className","fluid","Button","href","Layout","props","Container","children","JumboAbout","JumboShop","Styles","styled","div","NavigationBar","Navbar","expand","Brand","Toggle","aria-controls","Collapse","id","Nav","Item","Link","Home","Footer","App","callBackendAPI","a","async","fetch","response","json","body","status","Error","message","this","then","res","setState","data","express","catch","err","console","log","basename","Fragment","exact","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qWAMaA,G,MAAY,kBACvB,kBAAC,IAAD,CAAOC,UAAU,UAAUC,OAAK,GAC9B,kBAACC,EAAA,EAAD,CAAQF,UAAU,UAAUG,KAAK,SAAjC,aAEU,O,QCPDC,EAAS,SAAAC,GAAK,OAAI,kBAACC,EAAA,EAAD,KAAYD,EAAME,WCGpCC,EAAa,kBACxB,kBAAC,IAAD,CAAOR,UAAU,aAAaC,OAAK,GACjC,0CCFSQ,EAAY,kBACvB,kBAAC,IAAD,CAAOT,UAAU,YAAYC,OAAK,GAChC,2C,0aCJJ,IAAMS,E,MAASC,EAAOC,IAAV,KA0BCC,EAAgB,kBAC3B,kBAACH,EAAD,KACE,kBAACI,EAAA,EAAD,CAAQC,OAAO,MACb,kBAACD,EAAA,EAAOE,MAAR,CAAcb,KAAK,KAAnB,sBACA,kBAACW,EAAA,EAAOG,OAAR,CAAeC,gBAAc,qBAC7B,kBAACJ,EAAA,EAAOK,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKrB,UAAU,WACb,kBAACqB,EAAA,EAAIC,KAAL,KACE,kBAACD,EAAA,EAAIE,KAAL,CAAUpB,KAAK,UAAf,UAEF,kBAACkB,EAAA,EAAIC,KAAL,KACE,kBAACD,EAAA,EAAIE,KAAL,CAAUpB,KAAK,SAAf,cC9BCqB,EAAO,kBAClB,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MAEA,kBAAC,EAAD,KACE,uBAAGxB,UAAU,SAAb,kFAIA,uBAAGoB,GAAG,WAER,kBAAC,EAAD,CAAYpB,UAAU,OACtB,kBAAC,EAAD,KACE,uBAAGA,UAAU,cAAb,oHAKF,kBAAC,EAAD,MACA,kBAAC,EAAD,KACE,uBAAGA,UAAU,YAAYoB,GAAG,QACzB,IADH,0D,MCrBSK,MARf,WACE,OACE,yBAAKzB,UAAU,UACb,uBAAGG,KAAK,wCAAR,gBCsDSuB,E,2MA9BbC,eAAiB,4BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACQE,MAAM,qBADd,cACTC,EADS,kBAAAH,EAAA,MAEIG,EAASC,QAFb,UAETC,EAFS,OAIS,MAApBF,EAASG,OAJE,sBAKPC,MAAMF,EAAKG,SALJ,gCAORH,GAPQ,sC,mFAPI,IAAD,OAElBI,KAAKV,iBACFW,MAAK,SAAAC,GAAG,OAAI,EAAKC,SAAS,CAAEC,KAAMF,EAAIG,aACtCC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,Q,+BAc5B,OACE,kBAAC,IAAD,CAAYG,SAAS,KACnB,kBAAC,IAAMC,SAAP,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,OAAK,EACLC,KAAM,IACNC,UAAW3B,MAIjB,kBAAC,EAAD,Y,GA/BQ4B,aCVEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAA2B,GACjCA,EAAaC,kB","file":"static/js/main.751535b0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Jumbotron as Jumbo, Container, Button } from \"react-bootstrap\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./bkgimage.css\";\r\n\r\nexport const Jumbotron = () => (\r\n  <Jumbo className=\"myjumbo\" fluid>\r\n    <Button className=\"btnshop\" href=\"#shop\">\r\n      Shop Now.\r\n    </Button>{\" \"}\r\n  </Jumbo>\r\n);\r\n","import React from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\n\r\nexport const Layout = props => <Container>{props.children}</Container>;\r\n","import React from \"react\";\r\nimport { Jumbotron as Jumbo, Container, Button } from \"react-bootstrap\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./bkgimage.css\";\r\n\r\nexport const JumboAbout = () => (\r\n  <Jumbo className=\"jumboAbout\" fluid>\r\n    <h1>About Us</h1>\r\n  </Jumbo>\r\n);\r\n","import React from \"react\";\r\nimport { Jumbotron as Jumbo, Container, Button } from \"react-bootstrap\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./bkgimage.css\";\r\n\r\nexport const JumboShop = () => (\r\n  <Jumbo className=\"jumboShop\" fluid>\r\n    <h1>sold out.</h1>\r\n  </Jumbo>\r\n);\r\n","import React from \"react\";\r\nimport { Nav, Navbar } from \"react-bootstrap\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Styles = styled.div`\r\n.navbar{\r\n  background-color white;\r\n  height: 125px;\r\n  z-index: 50;\r\n  \r\n}\r\n\r\n.navbar-brand, .navbar-nav .nav-link {\r\n  color black;\r\n  font-family: \"Raleway\";\r\n\r\n  &:hover{\r\n    color: grey;\r\n  }\r\n  .navbar-fixed-top {\r\n    top: 100px;\r\n\r\n  }\r\n  .navbar-fixed-top, .navbar-fixed-bottom {\r\n    position: relative;\r\n    \r\n  }\r\n}\r\n`;\r\n\r\nexport const NavigationBar = () => (\r\n  <Styles>\r\n    <Navbar expand=\"lg\">\r\n      <Navbar.Brand href=\"/\">thats it. nothing.</Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"ml-auto\">\r\n          <Nav.Item>\r\n            <Nav.Link href=\"#about\">About</Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link href=\"#shop\">Shop</Nav.Link>\r\n          </Nav.Item>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  </Styles>\r\n);\r\n","import React from \"react\";\r\nimport { Jumbotron } from \"./components/Jumbotron.js\";\r\nimport { Layout } from \"./components/Layout\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nimport \"./components/bkgimage.css\";\r\nimport { JumboAbout } from \"./components/JumboAbout.js\";\r\nimport { JumboShop } from \"./components/JumboShop.js\";\r\nimport { NavigationBar } from \"./components/NavigationBar\";\r\n\r\nexport const Home = () => (\r\n  <div>\r\n    <NavigationBar />\r\n    <Jumbotron />\r\n\r\n    <Layout>\r\n      <p className=\"words\">\r\n        that's it. nothing. stickers currently in production, ordering available\r\n        soon.\r\n      </p>\r\n      <p id=\"about\"></p>\r\n    </Layout>\r\n    <JumboAbout className=\"hi\" />\r\n    <Layout>\r\n      <p className=\"jumboWords\">\r\n        about us. saving the earth with eco products. buy eco stickers. follow\r\n        instagram. more coming soon. stay tuned.\r\n      </p>\r\n    </Layout>\r\n    <JumboShop />\r\n    <Layout>\r\n      <p className=\"shopwords\" id=\"shop\">\r\n        {\" \"}\r\n        but keep checking, who knows when the next drop is?\r\n      </p>\r\n    </Layout>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\n\r\nimport \"../App.css\";\r\nfunction Footer() {\r\n  return (\r\n    <div className=\"Footer\">\r\n      <a href=\"https://instagram.com/thatsitnothing\">instagram.</a>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React, { Component, setCustomText } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  HashRouter\n} from \"react-router-dom\";\nimport { Home } from \"./Home\";\nimport { About } from \"./About\";\nimport { Contact } from \"./Contact\";\nimport { NoMatch } from \"./NoMatch\";\nimport { Layout } from \"./components/Layout\";\n\nimport { Jumbotron } from \"./components/Jumbotron.js\";\nimport Footer from \"./components/Footer.js\";\n\nconst customTextProps = {\n  style: {\n    fontFamily: \"Raleway\"\n  }\n};\n\nclass App extends Component {\n  componentDidMount() {\n    // Call our fetch function below once the component mounts\n    this.callBackendAPI()\n      .then(res => this.setState({ data: res.express }))\n      .catch(err => console.log(err));\n  }\n  // Fetches our GET route from the Express server. (Note the route we are fetching matches the GET route from server.js\n  callBackendAPI = async () => {\n    const response = await fetch(\"/express_backend\");\n    const body = await response.json();\n\n    if (response.status !== 200) {\n      throw Error(body.message);\n    }\n    return body;\n  };\n\n  render() {\n    return (\n      <HashRouter basename=\"/\">\n        <React.Fragment>\n          <Router>\n            <Switch>\n              <Route\n                exact\n                path={\"process.env.PUBLIC_URL + \" / \"\"}\n                component={Home}\n              />\n            </Switch>\n          </Router>\n          <Footer />\n        </React.Fragment>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}