{"version":3,"sources":["components/Jumbotron.js","components/Layout.js","Home.js","components/JumboAbout.js","About.js","components/JumboShop.js","Contact.js","NoMatch.js","components/NavigationBar.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","className","fluid","Button","href","Layout","props","Container","children","Home","JumboAbout","About","JumboShop","Contact","NoMatch","Styles","styled","div","NavigationBar","Navbar","expand","Brand","Toggle","aria-controls","Collapse","id","Nav","Item","Link","Footer","App","basename","Fragment","exact","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oVAMaA,G,MAAY,kBACvB,kBAAC,IAAD,CAAOC,UAAU,UAAUC,OAAK,GAC9B,kBAACC,EAAA,EAAD,CAAQF,UAAU,UAAUG,KAAK,SAAjC,YAEU,O,QCPDC,EAAS,SAAAC,GAAK,OAAI,kBAACC,EAAA,EAAD,KAAYD,EAAME,WCGpCC,EAAO,kBAClB,6BACE,kBAAC,EAAD,MAEA,kBAAC,EAAD,KACE,uBAAGR,UAAU,SAAb,2/BAiBA,uBAAGA,UAAU,SAAb,2/BAiBA,uBAAGA,UAAU,SAAb,2/BAiBA,uBAAGA,UAAU,SAAb,8/BCxDOS,EAAa,kBACxB,kBAAC,IAAD,CAAOT,UAAU,aAAaC,OAAK,GACjC,0CCFSS,EAAQ,kBACnB,6BACE,kBAAC,EAAD,CAAYV,UAAU,OACtB,kBAAC,EAAD,KACE,uBAAGA,UAAU,cAAb,sHCJOW,EAAY,kBACvB,kBAAC,IAAD,CAAOX,UAAU,YAAYC,OAAK,GAChC,2CCJSW,EAAU,kBACrB,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,KACE,uBAAGZ,UAAU,aACV,IADH,0DCNOa,EAAU,kBACrB,6BACE,0C,0RCAJ,IAAMC,E,MAASC,EAAOC,IAAV,KAiBCC,EAAgB,kBAC3B,kBAACH,EAAD,KACE,kBAACI,EAAA,EAAD,CAAQC,OAAO,MACb,kBAACD,EAAA,EAAOE,MAAR,CAAcjB,KAAK,KAAnB,sBACA,kBAACe,EAAA,EAAOG,OAAR,CAAeC,gBAAc,qBAC7B,kBAACJ,EAAA,EAAOK,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKzB,UAAU,WACb,kBAACyB,EAAA,EAAIC,KAAL,KACE,kBAACD,EAAA,EAAIE,KAAL,CAAUxB,KAAK,UAAf,UAEF,kBAACsB,EAAA,EAAIC,KAAL,KACE,kBAACD,EAAA,EAAIE,KAAL,CAAUxB,KAAK,SAAf,c,MCzBGyB,MAJf,WACE,OAAO,yBAAK5B,UAAU,UAAf,gBCkCM6B,E,iLApBX,OACE,kBAAC,IAAD,CAAYC,SAAS,KACnB,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,MAEA,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW1B,IACjC,kBAAC,IAAD,CAAOyB,KAAK,SAASC,UAAWxB,IAChC,kBAAC,IAAD,CAAOuB,KAAK,QAAQC,UAAWtB,IAC/B,kBAAC,IAAD,CAAOsB,UAAWrB,MAGtB,kBAAC,EAAD,Y,GAfQsB,aCJEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b1c208f4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Jumbotron as Jumbo, Container, Button } from \"react-bootstrap\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./bkgimage.css\";\r\n\r\nexport const Jumbotron = () => (\r\n  <Jumbo className=\"myjumbo\" fluid>\r\n    <Button className=\"btnshop\" href=\"/shop\">\r\n      Shop Now\r\n    </Button>{\" \"}\r\n  </Jumbo>\r\n);\r\n","import React from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\n\r\nexport const Layout = props => <Container>{props.children}</Container>;\r\n","import React from \"react\";\r\nimport { Jumbotron } from \"./components/Jumbotron.js\";\r\nimport { Layout } from \"./components/Layout\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const Home = () => (\r\n  <div>\r\n    <Jumbotron />\r\n\r\n    <Layout>\r\n      <p className=\"words\">\r\n        The long essay question on the AP U.S. History exam is designed to test\r\n        your ability to apply knowledge of history in a complex, analytic\r\n        manner. In other words, you are expected to treat history and historical\r\n        questions as a historian would. This process is called historiography窶能r\n        the skills and strategies historians use to analyze and interpret\r\n        historical evidence to reach a conclusion. Thus, when writing an\r\n        effective essay, you must be able to write a strong and clearly\r\n        developed thesis and supply a substantial amount of relevant evidence to\r\n        support your thesis. Look at the question below and formulate a\r\n        response. You can do this by making bullet points or, to get the test\r\n        day experience, time yourself for 35 minutes and write! After the\r\n        question, there are two sample essays that would receive a perfect\r\n        scores. Check your essay against them to see if you got many of the same\r\n        key points. Remember the four steps: dissect the question, formulate a\r\n        thesis, plan your evidence, and write your essay.\r\n      </p>\r\n      <p className=\"words\">\r\n        The long essay question on the AP U.S. History exam is designed to test\r\n        your ability to apply knowledge of history in a complex, analytic\r\n        manner. In other words, you are expected to treat history and historical\r\n        questions as a historian would. This process is called historiography窶能r\n        the skills and strategies historians use to analyze and interpret\r\n        historical evidence to reach a conclusion. Thus, when writing an\r\n        effective essay, you must be able to write a strong and clearly\r\n        developed thesis and supply a substantial amount of relevant evidence to\r\n        support your thesis. Look at the question below and formulate a\r\n        response. You can do this by making bullet points or, to get the test\r\n        day experience, time yourself for 35 minutes and write! After the\r\n        question, there are two sample essays that would receive a perfect\r\n        scores. Check your essay against them to see if you got many of the same\r\n        key points. Remember the four steps: dissect the question, formulate a\r\n        thesis, plan your evidence, and write your essay.\r\n      </p>\r\n      <p className=\"words\">\r\n        The long essay question on the AP U.S. History exam is designed to test\r\n        your ability to apply knowledge of history in a complex, analytic\r\n        manner. In other words, you are expected to treat history and historical\r\n        questions as a historian would. This process is called historiography窶能r\n        the skills and strategies historians use to analyze and interpret\r\n        historical evidence to reach a conclusion. Thus, when writing an\r\n        effective essay, you must be able to write a strong and clearly\r\n        developed thesis and supply a substantial amount of relevant evidence to\r\n        support your thesis. Look at the question below and formulate a\r\n        response. You can do this by making bullet points or, to get the test\r\n        day experience, time yourself for 35 minutes and write! After the\r\n        question, there are two sample essays that would receive a perfect\r\n        scores. Check your essay against them to see if you got many of the same\r\n        key points. Remember the four steps: dissect the question, formulate a\r\n        thesis, plan your evidence, and write your essay.\r\n      </p>\r\n      <p className=\"words\">\r\n        The long essay question on the AP U.S. History exam is designed to test\r\n        your ability to apply knowledge of history in a complex, analytic\r\n        manner. In other words, you are expected to treat history and historical\r\n        questions as a historian would. This process is called historiography窶能r\n        the skills and strategies historians use to analyze and interpret\r\n        historical evidence to reach a conclusion. Thus, when writing an\r\n        effective essay, you must be able to write a strong and clearly\r\n        developed thesis and supply a substantial amount of relevant evidence to\r\n        support your thesis. Look at the question below and formulate a\r\n        response. You can do this by making bullet points or, to get the test\r\n        day experience, time yourself for 35 minutes and write! After the\r\n        question, there are two sample essays that would receive a perfect\r\n        scores. Check your essay against them to see if you got many of the same\r\n        key points. Remember the four steps: dissect the question, formulate a\r\n        thesis, plan your evidence, and write your essay.\r\n      </p>\r\n    </Layout>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport { Jumbotron as Jumbo, Container, Button } from \"react-bootstrap\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./bkgimage.css\";\r\n\r\nexport const JumboAbout = () => (\r\n  <Jumbo className=\"jumboAbout\" fluid>\r\n    <h1>About Us</h1>\r\n  </Jumbo>\r\n);\r\n","import React from \"react\";\r\nimport { Layout } from \"./components/Layout\";\r\nimport { Jumbotron, Container, Button } from \"react-bootstrap\";\r\nimport \"./components/bkgimage.css\";\r\nimport { JumboAbout } from \"./components/JumboAbout.js\";\r\n\r\nexport const About = () => (\r\n  <div>\r\n    <JumboAbout className=\"hi\" />\r\n    <Layout>\r\n      <p className=\"jumboWords\">\r\n        about us. saving the earth with eco products. buy eco stickers. follow\r\n        instagram. more coming soon. stay tuned.\r\n      </p>\r\n    </Layout>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport { Jumbotron as Jumbo, Container, Button } from \"react-bootstrap\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./bkgimage.css\";\r\n\r\nexport const JumboShop = () => (\r\n  <Jumbo className=\"jumboShop\" fluid>\r\n    <h1>sold out.</h1>\r\n  </Jumbo>\r\n);\r\n","import React from \"react\";\r\nimport { Layout } from \"./components/Layout\";\r\nimport { JumboShop } from \"./components/JumboShop.js\";\r\n\r\nexport const Contact = () => (\r\n  <div>\r\n    <JumboShop />\r\n    <Layout>\r\n      <p className=\"shopwords\">\r\n        {\" \"}\r\n        but keep checking, who knows when the next drop is?\r\n      </p>\r\n    </Layout>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\n\r\nexport const NoMatch = () => (\r\n  <div>\r\n    <h2>No Match</h2>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport { Nav, Navbar } from \"react-bootstrap\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Styles = styled.div`\r\n.navbar{\r\n  background-color white;\r\n  height: 70px;\r\n  \r\n}\r\n\r\n.navbar-brand, .navbar-nav .nav-link {\r\n  color black;\r\n  font-family: \"Raleway\";\r\n\r\n  &:hover{\r\n    color: white;\r\n  }\r\n}\r\n`;\r\n\r\nexport const NavigationBar = () => (\r\n  <Styles>\r\n    <Navbar expand=\"lg\">\r\n      <Navbar.Brand href=\"/\">thats it. nothing.</Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"ml-auto\">\r\n          <Nav.Item>\r\n            <Nav.Link href=\"/about\">About</Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link href=\"/shop\">Shop</Nav.Link>\r\n          </Nav.Item>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  </Styles>\r\n);\r\n","import React from \"react\";\r\n\r\nimport \"../App.css\";\r\nfunction Footer() {\r\n  return <div className=\"Footer\">Lorem Ipsum</div>;\r\n}\r\n\r\nexport default Footer;\r\n","import React, { Component } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  HashRouter\n} from \"react-router-dom\";\nimport { Home } from \"./Home\";\nimport { About } from \"./About\";\nimport { Contact } from \"./Contact\";\nimport { NoMatch } from \"./NoMatch\";\nimport { Layout } from \"./components/Layout\";\nimport { NavigationBar } from \"./components/NavigationBar\";\nimport { Jumbotron } from \"./components/Jumbotron.js\";\nimport Footer from \"./components/Footer.js\";\n\nclass App extends Component {\n  render() {\n    return (\n      <HashRouter basename=\"/\">\n        <React.Fragment>\n          <NavigationBar />\n\n          <Router>\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route path=\"/about\" component={About} />\n              <Route path=\"/shop\" component={Contact} />\n              <Route component={NoMatch} />\n            </Switch>\n          </Router>\n          <Footer />\n        </React.Fragment>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}